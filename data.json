[{"model": "blog.comment", "pk": 1, "fields": {"creator": 1, "content": "Test comment", "content_type": 7, "object_id": 1, "created_at": "2025-04-05T11:21:58.382Z", "modified_at": "2025-04-05T11:21:58.382Z"}}, {"model": "blog.comment", "pk": 2, "fields": {"creator": 1, "content": "Teste crispy forms", "content_type": 7, "object_id": 1, "created_at": "2025-04-10T08:34:36.875Z", "modified_at": "2025-04-10T08:34:36.875Z"}}, {"model": "blog.comment", "pk": 3, "fields": {"creator": 1, "content": "Comentário de teste", "content_type": 9, "object_id": 3, "created_at": "2025-04-24T22:27:53.251Z", "modified_at": "2025-04-24T22:28:48.101Z"}}, {"model": "blog.comment", "pk": 4, "fields": {"creator": 1, "content": "teste rewassijdhf asdjhfka s", "content_type": 7, "object_id": 1, "created_at": "2025-04-24T22:29:09.576Z", "modified_at": "2025-04-24T22:29:09.576Z"}}, {"model": "blog.comment", "pk": 5, "fields": {"creator": 1, "content": "kzjsdhf aodfh kasdjhf kas dhfkjhasdfkhasd fhaskdfhk askaskdf asdkfhsadk  shadkjf haksdfjas sdaf", "content_type": 7, "object_id": 1, "created_at": "2025-04-24T22:29:33.276Z", "modified_at": "2025-04-24T22:29:33.276Z"}}, {"model": "blog.tag", "pk": 1, "fields": {"value": "test"}}, {"model": "blog.tag", "pk": 2, "fields": {"value": "testdrive"}}, {"model": "blog.post", "pk": 1, "fields": {"author": 1, "created_at": "2025-03-31T11:10:20.630Z", "modified_at": "2025-03-31T11:10:20.630Z", "published_at": "2025-03-31T11:09:23Z", "title": "Test 1 blog hahahaha sdkfjn aoskdjf", "slug": "test-1-blog-hahahaha-sdkfjn-aoskdjf", "summary": "Test 1 blog hahahaha sdkfjn aoskdjf fdg\r\n\r\ndfgdf\r\ng\r\n\r\n\r\ndfg\r\nsdfgsdfg\r\n\r\nsdf\r\ng\r\nsdfg\r\nsd\r\nfg\r\n\r\n\r\nsdfg\r\ntghujk\r\nfyuk", "content": "asdfasdf asdfasdfasf gfhgfIf you don’t already have some test Blog data added, you should log to the Django admin and add a couple of posts, and another user as an extra author. This will come in handy later.\r\n\r\nIf you don’t already have some test Blog data added, you should log to the Django admin and add a couple of posts, and another user as an extra author. This will come in handy later.\r\n\r\n\r\nIf you don’t already have some test Blog data added, you should log to the Django admin and add a couple of posts, and another user as an extra author. This will come in handy later.\r\n\r\nIf you don’t already have some test Blog data added, you should log to the Django admin and add a couple of posts, and another user as an extra author. This will come in handy later.", "tags": [1, 2]}}, {"model": "blog.post", "pk": 2, "fields": {"author": 1, "created_at": "2025-03-31T11:11:16.788Z", "modified_at": "2025-03-31T11:11:16.788Z", "published_at": "2025-03-31T11:10:24Z", "title": "correct as we’re storing raw HTML in the content field and thus the", "slug": "correct-as-were-storing-raw-html-in-the-content-fi", "summary": "Next we need to render the post data in the templatYou should notice that we’re using two built in filters:", "content": "Next we need to render the post data in the templatNext we need to render the post data in the templat\r\n\r\nYou should notice that we’re using two built in filters:\r\nThe date filter which outputs the date in month, day year format (its argument).\r\nThe wordcount filter to count the words in the Post's content. Note that this is not strictly correct as we’re storing raw HTML in the content field and thus the", "tags": [1, 2]}}, {"model": "blog.post", "pk": 3, "fields": {"author": 1, "created_at": "2025-03-31T11:11:40.614Z", "modified_at": "2025-03-31T11:11:40.614Z", "published_at": "2025-03-31T11:11:22Z", "title": "Template Tag File Set Up", "slug": "template-tag-file-set-up", "summary": "You’ve probably loaded custom template tag libraries into a template before using the build in load template tag. More than likely, you’ve loaded the static template tag library like this:", "content": "Note that the convention is to name template tag files in the format [something]_extras.py, but this is not mandatory. You just need to be sure that your file won’t conflict with any of the built in template libraries or third parties that you might have included. Template tag files aren’t namespaced so blog_extras could be used by any app in our project.\r\nTry It Out\r\nLet’s start by setting up the directory structure for the custom template tags. You’ll need to create the following things:", "tags": [2]}}, {"model": "blog.post", "pk": 4, "fields": {"author": 1, "created_at": "2025-04-01T22:22:48.941Z", "modified_at": "2025-04-01T22:22:48.941Z", "published_at": "2025-04-01T22:22:26Z", "title": "A useful feature for a blog site is a way to see recent posts.", "slug": "a-useful-feature-for-a-blog-site-is-a-way-to-see-r", "summary": "A useful feature for a blog site is a way to see recent posts. We’ll create an inclusion tag that fetches the five most recent posts, but excludes the current post being viewed. Then it will render a template.", "content": "We’ll have it include a place to put the title, so that it can be generic and show different titles depending on which page it’s used. We’ll then iterate over a list of Post objects and render them in a <ul>; with each <li> containing a link to the post detail page for that Post.", "tags": [1]}}, {"model": "blog.post", "pk": 5, "fields": {"author": 1, "created_at": "2025-04-01T22:23:19.403Z", "modified_at": "2025-04-01T22:23:19.403Z", "published_at": "2025-04-01T22:22:55Z", "title": "By using an inclusion tag, you can query for extra data inside your template tag", "slug": "by-using-an-inclusion-tag-you-can-query-for-extra", "summary": "By using an inclusion tag, you can query for extra data inside your template tag function, which can then be used to render a template.", "content": "By using an inclusion tag, you can query for extra data inside your template tag function, which can then be used to render a template.\r\nInclusion tags are registered with the Library.inclusion_tag function. This has one required argument, the name of the template to render. Unlike simple tags, inclusion tags don’t return a string to render. They return a context dictionary, which is used to render template used during registration.\r\nA useful feature for a blog site is a way to see recent posts. We’ll create an inclusion tag that fetches the five most recent posts, but excludes the current post being viewed. Then it will render a template.", "tags": [2]}}, {"model": "blog.post", "pk": 6, "fields": {"author": 1, "created_at": "2025-04-01T22:25:25.928Z", "modified_at": "2025-04-01T22:25:25.928Z", "published_at": "2025-04-01T22:25:06Z", "title": "What is the main benefit of using an inclusion tag?", "slug": "what-is-the-main-benefit-of-using-an-inclusion-tag", "summary": "In the example on this page, a Post object is passed to the recent_posts template tag. Now the template tag can access any information in the Post object.", "content": "Be sure to add a date and time to the post, otherwise, they will be filtered out of the website\r\n\r\nThe current post that’s being viewed should not be in the list of Recent Posts.\r\nAs with a simple tag, we can also pass the context to the inclusion tag function, by adding a context argument and adding takes_context=True to the decorator call.\r\nNext we’ll take a brief look at advanced template tags.\r\n\r\nReading Question\r\nWhat is the main benefit of using an inclusion tag?\r\n\r\n\r\nInclusion tags render faster than regular temp", "tags": [1]}}, {"model": "blog.post", "pk": 7, "fields": {"author": 1, "created_at": "2025-04-01T22:26:06.883Z", "modified_at": "2025-04-01T22:26:06.883Z", "published_at": "2025-04-01T22:25:43Z", "title": "What is Lorem Ipsum?", "slug": "what-is-lorem-ipsum", "summary": "What is Lorem Ipsum?", "content": "Where does it come from?\r\nContrary to popular belief, Lorem Ipsum is not simply random text. It has roots in a piece of classical Latin literature from 45 BC, making it over 2000 years old. Richard McClintock, a Latin professor at Hampden-Sydney College in Virginia, looked up one of the more obscure Latin words, consectetur, from a Lorem Ipsum passage, and going through the cites of the word in classical literature, discovered the undoubtable source. Lorem Ipsum comes from sections 1.10.32 and 1.10.33 of \"de Finibus Bonorum et Malorum\" (The Extremes of Good and Evil) by Cicero, written in 45 BC. This book is a treatise on the theory of ethics, very popular during the Renaissance. The first line of Lorem Ipsum, \"Lorem ipsum dolor sit amet..\", comes from a line in section 1.10.32.\r\n\r\nThe standard chunk of Lorem Ipsum used since the 1500s is reproduced below for those interested. Sections 1.10.32 and 1.10.33 from \"de Finibus Bonorum et Malorum\" by Cicero are also reproduced in their exact original form, accompanied by English versions from the 1914 translation by H. Rackham.", "tags": [1, 2]}}, {"model": "blango_auth.User", "pk": 1, "fields": {"password": "argon2$argon2id$v=19$m=102400,t=2,p=8$b1ZHTmRhajJ3ZkJ2VGFXSDVINVFXdw$XIrOhYVDGjXLxL3trFJbhcC7RvB6DOTBr3OyrNQ0tIY", "last_login": "2025-04-25T00:02:51.326Z", "is_superuser": true, "username": "j3frsn", "first_name": "Jeferson", "last_name": "Matos Andrade", "email": "j3frsn@proton.me", "is_staff": true, "is_active": true, "date_joined": "2025-03-19T23:53:57Z", "groups": [], "user_permissions": []}}]